# B.Store Application Configuration
# A Flutter-based e-commerce application leveraging Firebase services for backend functionality

name: b_store
# Unique identifier for this package
# Used throughout the development ecosystem to reference this application
# Should be in snake_case format with no special characters
# Must be a valid Dart identifier (not starting with numbers)

description: "A cross-platform e-commerce mobile application built with Flutter and powered by Firebase , designed to deliver a seamless shopping experience for users and efficient inventory management for administrators. This application integrates real-time product listings , secure user authentication , shopping cart functionality , and cloud-based storage for images and user data. Leveraging Firebase Authentication , Cloud Firestore , and Storage , the app ensures secure, scalable, and responsive interactions. Advanced features include custom Arabic typography (Simplified Arabic), responsive UI/UX design , and state management using BLoC for dynamic user interactions. The project emphasizes modular architecture , code maintainability , and performance optimization , making it ideal for future expansions like payment gateways, analytics, or multi-language support."
# Brief summary of the package's purpose
# Required for packages published to pub.dev
# Should be concise (60-180 characters) and informative

# Prevents accidental public publishing - remove for pub.dev deployment
# Security measure to avoid unintentional exposure of private packages
# Set to 'none' for internal/private projects
publish_to: 'none'

# Versioning follows Semantic Versioning (https://semver.org/) 
# Format: [major].[minor].[patch]+[build]
# Platform-specific mappings:
# - Android: versionName (CFBundleShortVersionString) + versionCode (CFBundleVersion)
# - iOS: CFBundleShortVersionString (build-name) + CFBundleVersion (build-number)
# - Windows: ProductVersion (major.minor.patch.build)
# Build numbers can be overridden at build time using --build-name and --build-number flags
version: 1.0.0+1

environment:
  # Specifies required Dart SDK version constraint
  # Uses caret syntax (^) for compatibility while allowing safe upgrades
  # Minimum Dart version required for this project
  sdk: ^3.7.2

dependencies:
  # Core Flutter framework dependency
  # Always required as the foundation of all Flutter applications
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter
  # Cupertino Icons font for iOS-style iconography
  # Provides Apple's SF Symbols integration and Cupertino icon set
  cupertino_icons: ^1.0.8

  # Firebase Core integration
  # Foundation for all Firebase services in the application
  firebase_core: ^3.13.1

  # Firebase Authentication service
  # Handles user management, email/password auth, and third-party integrations
  firebase_auth: ^5.5.4

  # Firebase Cloud Storage integration
  # For managing user-generated content and media files
  firebase_storage: ^12.4.6

  # Business Logic Component pattern implementation
  # State management solution for complex application logic
  flutter_bloc: ^9.1.1
  intl: ^0.19.0

dev_dependencies:
  # Flutter testing framework
  # Required for widget testing and unit testing capabilities
  flutter_test:
    sdk: flutter

  # Official Flutter lint ruleset
  # Contains recommended code quality and style guidelines
  # Configuration managed in analysis_options.yaml
  flutter_lints: ^5.0.0

flutter:
  # Enables Material Design components and iconography
  # Required for apps using MaterialApp and Material Components
  uses-material-design: true
  generate: true

  # Asset management configuration
  # Resolution-aware images should follow:
  # - [asset-path]/[density]/[filename] structure
  # Example:
  # - assets/images/icon.png (base 1.0x)
  # - assets/images/2.0x/icon.png
  # - assets/images/3.0x/icon.png
  assets:
    - assets/images/
    - assets/icons/

  # Font configuration section
  # Custom fonts must be placed in the specified asset paths
  # Each font family can have multiple weights and styles
  # Weight values should follow standard typography conventions (400=normal, 700=bold)
  fonts:
    - family: myFont
      fonts:
        - asset: assets/fonts/Roboto_Condensed-Regular.ttf
          weight: 400
          style: normal
        - asset: assets/fonts/Roboto_Condensed-Medium.ttf
          weight: 500
          style: normal
        - asset: assets/fonts/Roboto_Condensed-Bold.ttf
          weight: 700
          style: normal

# NOTES FOR DEVELOPERS:
# 1. To update dependencies to latest versions:
#    Run `flutter pub upgrade --major-versions`
#
# 2. To check for outdated dependencies:
#    Run `flutter pub outdated`
#
# 3. For multi-environment builds:
#    Consider using multiple pubspec.yaml files or build flavors
#
# 4. Font Best Practices:
#    - Use consistent font weights across the application
#    - Compress font files where possible (woff2 format recommended)
#    - Limit the number of font variants to optimize app size
#
# 5. Asset Management:
#    - Maintain 1x, 2x, and 3x image variants for optimal display
#    - Use PNG format for static images and WebP for complex graphics
#    - Organize assets in a clear directory structure